@page "/login"
@using BlazorFrontend.Client.Models
@inject BlazorFrontend.Client.Services.ApiService ApiService
@inject NavigationManager Navigation
@using MudBlazor
@using Microsoft.JSInterop

<MudPaper Class="pa-4" Elevation="4">
    <MudText Typo="Typo.h5">Login</MudText>
    <MudForm @ref="form" OnValidSubmit="HandleLogin">
        <MudTextField @bind-Value="username" Label="Username" Required="true" />
        <MudTextField @bind-Value="password" Label="Password" InputType="InputType.Password" Required="true" />
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudText Color="Color.Error">@errorMessage</MudText>
        }
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Login</MudButton>
    </MudForm>
</MudPaper>

@code {
    private MudForm form;
    private string username;
    private string password;
    private string errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var loginResponse = await ApiService.LoginAsync(username, password);
            if (loginResponse != null && !string.IsNullOrEmpty(loginResponse.Token))
            {
                // トークンをセッションストレージに保存
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "authToken", loginResponse.Token);

                // 認証後、メニューページへ遷移
                Navigation.NavigateTo("/menu");
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }
}